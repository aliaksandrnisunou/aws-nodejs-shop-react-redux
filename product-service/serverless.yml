service: product-service
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  profile: sandx
  environment:
    PRODUCTS_TABLE: ${self:custom.productsTableName}
    STOCKS_TABLE: ${self:custom.stocksTableName}
    POSTGRESQL_HOST: !GetAtt PostgreSqlRDSInstance.Endpoint.Address
    POSTGRESQL_PORT: !GetAtt PostgreSqlRDSInstance.Endpoint.Port
    DATABASE_USERNAME: ${self:custom.DATABASE_USERNAME}
    DATABASE_PASSWORD: ${self:custom.DATABASE_PASSWORD}
    DATABASE_NAME: ${self:custom.DATABASE_NAME}
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - "rds:connect"
            - "rds:CreateDBInstance"
            - "rds:ModifyDBInstance"
            - "rds:DeleteDBInstance"
          Resource:
            Fn::Join:
              - ''
              - - 'arn:aws:rds:::'
                - Ref: PostgreSqlRDSInstance
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [ ProductsTable, Arn ]
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [ StocksTable, Arn ]

plugins:
  - serverless-webpack
  - serverless-openapi-documenter

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    excludeFiles: src/**/*.test.js
  documentation: ${file(serverless.doc.yml):documentation}
  productsTableName: 'products'
  stocksTableName: 'stocks'
  DATABASE_USERNAME: ${env:DATABASE_USERNAME}
  DATABASE_PASSWORD: ${env:DATABASE_PASSWORD}
  DATABASE_NAME: ${env:DB_NAME}

functions:
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                productId: true
          documentation:
            summary: Return product by ID
            description: OK
            pathParams:
              - name: productId
                description: Product Id
                schema:
                  type: string
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: Product object
                responseModels:
                  application/json: GetProductByIdResponse
              - statusCode: 404
                responseBody:
                  description: Product not found
                responseModels:
                  application/json: GetProductByIdErrorResponse

  getAllProducts:
    handler: handler.getAllProducts
    events:
      - http:
          path: products
          method: get
          cors: true
          documentation:
            summary: Return list of products
            description: OK
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: List of products
                responseModels:
                  application/json: GetAllProductsResponse
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
          documentation:
            summary: Create a new product
            description: OK
            requestBody:
              description: "Create a new product body"
            requestModels:
              application/json: "CreateProductRequest"
            params:
            - name: "membershipType"
              description: "The user's Membership Type"
              schema:
                type: "string"
                enum:
                  - "premium"
                  - "standard"
            methodResponses:
              - statusCode: 200
                responseBody:
                  description: Id of created product
                responseModels:
                  application/json: CreatedProductResponse

resources:
  Resources:
    PostgreSqlRDSInstance:
        Type: AWS::RDS::DBInstance
        DeletionPolicy: Retain
        UpdateReplacePolicy: Retain
        Properties:
          MasterUsername: ${self:custom.DATABASE_USERNAME}
          MasterUserPassword: ${self:custom.DATABASE_PASSWORD}
          DBName: ${self:custom.DATABASE_NAME}
          AllocatedStorage: 5
          DBInstanceClass: db.t3.micro
          Engine: postgres
          PubliclyAccessible: true

    ProductsTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      UpdateReplacePolicy: Snapshot
      Properties:
        TableName: ${self:custom.productsTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    StocksTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Delete
      UpdateReplacePolicy: Snapshot
      Properties:
        TableName: ${self:custom.stocksTableName}
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
